@page "/lista-usuario"
@using ESFE_AGAPE_BODEGA.DTOs.UsuarioDTOs;
@using ESFE_AGAPE_BODEGA.DTOs.RolDTOs;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using ESFE_AGAPE_BODEGA.BlazorWebAssembly.DataService;

<ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AuthGuard>
    <ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AutorizacionPorRol Roles='new List<string> { "Admin", "SusAdmin" }'>
        <div class="row m-4">
            <div class="card col-md-12">
                <div class="card-header row">
                    <h1 class="col-md-12">Lista de Usuarios</h1>
                </div>
                <div class="card-body">
                    <EditForm Model="searchQuery" OnValidSubmit="SubmitSearch">
                        <div class="row">
                            <div class="col-4">
                                <div class="form-group">
                                    <label for="Nombre">Nombre:</label>
                                    <InputText class="form-control" @bind-Value="searchQuery.Nombre_Like" />
                                </div>
                            </div>
                            <div class="col-3">
                                <div class="form-group">
                                    <label for="Take">CantReg X Pagina:</label>
                                    <select class="form-control" @bind="searchQuery.Take">
                                        @for (var i = 10; i < 60; i += 10)
                                        {
                                            <option value="@i">@i</option>
                                        }
                                    </select>
                                </div>
                            </div>
                             <div class="col-md-5 d-flex align-items-end">
                                <button type="submit" class="btn btn-secondary mx-2">Buscar</button>
                                <NavLink href="/crear-usuario" class="btn btn-success">Crear</NavLink>
                            </div>
                        </div>
                    </EditForm>

                    <LoadingSpinner IsLoading="@isLoading" />
                </div>
            </div>

            <div class="card col-md-12">
                <div class="card-header row">
                    <h1 class="col-md-12">Lista de Usuarios</h1>
                </div>
                <div class="card-body">
                    @if (searchResult != null && searchResult.Data != null && searchResult.Data.Count > 0)
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Nombre</th>
                                    <th>Apellido</th>
                                    <th>DUI</th>
                                    <th>Rol</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var usuario in searchResult.Data)
                                {
                                    <tr>
                                        <td>@usuario.Nombre</td>
                                        <td>@usuario.Apellido</td>
                                        <td>@usuario.DUI</td>
                                        <td>@usuario.RolNombre</td>
                                        <td>
                                            <button class="btn btn-dark" @onclick="() => GoEdit(usuario.Id)">Editar</button>
                                            <button class="btn btn-info" @onclick="() => GoDetails(usuario.Id)">Ver</button>
                                            <button class="btn btn-danger" @onclick="() => GoDelete(usuario.Id)">Eliminar</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <!-- Paginación con scroll -->
                        <div class="row justify-content-center mt-3">
                            <nav aria-label="Page navigation example">
                                <div class="pagination-container" style="overflow-x: auto; white-space: nowrap; width: 100%; max-width: 600px;">
                                    <ul class="pagination" style="display: inline-flex; flex-wrap: nowrap;">
                                        <li class="page-item">
                                            <NavLink class="page-link" @onclick="async () => await PaginationSearch(skipAnte)">Anterior</NavLink>
                                        </li>
                                        @foreach (var item in paginations)
                                        {
                                            if (item.Skip != searchQuery.Skip)
                                            {
                                                <li class="page-item">
                                                    <NavLink class="page-link" @onclick="async () => await PaginationSearch(item.Skip)">@item.NumPage</NavLink>
                                                </li>
                                            }
                                            else
                                            {
                                                <li class="page-item active">
                                                    <NavLink class="page-link active" @onclick="async () => await PaginationSearch(item.Skip)">@item.NumPage</NavLink>
                                                </li>
                                            }
                                        }
                                        <li class="page-item">
                                            <NavLink class="page-link" @onclick="async () => await PaginationSearch(skipSi)">Siguiente</NavLink>
                                        </li>
                                    </ul>
                                </div>
                            </nav>
                        </div>

                        <!-- Total de registros -->
                        <div class="row justify-content-center mt-3">
                            <span>Total de registros: @searchResult.CountRow</span>
                        </div>

                    }
                    else
                    {
                        <p>No se encontraron usuarios.</p>
                    }
                </div>
            </div>
        </div>
    </ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AutorizacionPorRol>
</ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AuthGuard>

@code {
    // Inyección de dependencias de CustomerService y NavigationManager
    [Inject]
    UsuarioService usuarioService { get; set; }
    [Inject]
    NavigationManager navigation { get; set; }
    [Inject]
    RolService rolService { get; set; }

    // Declaración e inicialización de objetos y variables
    GetIdResultUsuarioDTO searchResult = new GetIdResultUsuarioDTO();
    SearchQueryUsuarioDTO searchQuery = new SearchQueryUsuarioDTO { Take = 10 };
    List<Pagination> paginations = new List<Pagination>();
    int skipAnte = 0;
    int skipSi = 0;

    bool isLoading = false; // Estado de carga

    // Método para realizar una búsqueda
    private async Task Search()
    {
        isLoading = true;
        try
        {
            searchResult = await usuarioService.Search(searchQuery);
          // Actualiza la lista de usuarios
        if (searchResult.Data != null)
        {
            // Asigna nombres de roles en paralelo
            var rolTasks = searchResult.Data.Select(async usuario =>
            {
                var rol = await rolService.ObtenerRol(usuario.RolId);
                usuario.RolNombre = rol?.Nombre ?? "Desconocido"; // Asignar nombre del rol
                StateHasChanged(); // Notifica a Blazor que el estado ha cambiado
            });

            // Inicia las tareas para obtener los roles
            _ = Task.WhenAll(rolTasks); // Ignoramos la espera aquí
        }
        }
        finally
        {
            isLoading = false;
        }
    }

    // Método que se llama cuando se inicializa el componente
    protected override async Task OnInitializedAsync()
    {
        searchQuery.SendRowCount = 2;
        searchQuery.Skip = 0;

        // Realizar la búsqueda inicial
        await Search();

        // Actualizar la paginación
        UpdatePagination();
    }

    // Método para realizar una búsqueda después de una acción de búsqueda
    private async Task SubmitSearch()
    {
        searchQuery.SendRowCount = 2;
        searchQuery.Skip = 0;

        await Search();
        UpdatePagination();
    }

    // Método para realizar una búsqueda paginada
    private async Task PaginationSearch(int skip)
    {
        int countRowTemp = searchResult.CountRow;

        searchQuery.SendRowCount = 1;
        searchQuery.Skip = skip;

        await Search();

        searchResult.CountRow = countRowTemp;
        UpdatePagination();
    }

    // Métodos para navegar a las páginas de edición, detalles y eliminación
    private void GoEdit(int Id)
    {
        navigation.NavigateTo($"/editar-usuario/{Id}");
    }

    private void GoDetails(int Id)
    {
        navigation.NavigateTo($"/usuario-detalles/{Id}");
    }

    private void GoDelete(int Id)
    {
        navigation.NavigateTo($"/eliminar-usuario/{Id}");
    }

    // Método para actualizar la lista de paginación
    private void UpdatePagination()
    {
        paginations = new List<Pagination>();

        int totalPages = (int)Math.Ceiling((double)searchResult.CountRow / searchQuery.Take);
        skipAnte = searchQuery.Skip > 0 ? searchQuery.Skip - searchQuery.Take : 0;
        int skipMax = 0;

        for (var i = 0; i < totalPages; i++)
        {
            var pagination = new Pagination()
                {
                    Skip = i * searchQuery.Take,
                    NumPage = i + 1
                };

            paginations.Add(pagination);
            skipMax = pagination.Skip;
        }

        skipSi = searchQuery.Skip + searchQuery.Take;
        skipSi = skipSi > skipMax ? skipSi - searchQuery.Take : skipSi;
    }

    // Clase para representar la información de paginación
    class Pagination
    {
        public int NumPage { get; set; }
        public int Skip { get; set; }
    }
}
