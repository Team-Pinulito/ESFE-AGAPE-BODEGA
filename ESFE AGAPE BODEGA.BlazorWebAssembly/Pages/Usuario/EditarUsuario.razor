@page "/editar-usuario/{Id:int}"
@using ESFE_AGAPE_BODEGA.DTOs.RolDTOs;
@using ESFE_AGAPE_BODEGA.DTOs.UsuarioDTOs;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using ESFE_AGAPE_BODEGA.BlazorWebAssembly.DataService;

<ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AuthGuard>
<ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AutorizacionPorRol Rol="Admin">
     <div class="row m-4">
        <div class="card col-md-12">
            <div class="card-header row"><h1>Editar Rol</h1></div>
            <div class="card-body">
@if (isSuccess == false && isError == false)
{
    <h3>Modificar Usuario</h3>

    <EditForm Model="usuario" OnValidSubmit="Edit">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-4">
                <div class="form-group">
                    <label for="Nombre">Nombre:</label>
                    <InputText class="form-control"  @bind-Value="usuario.Nombre" />
                    <ValidationMessage For="() => usuario.Nombre" />
                </div>
            </div>
            <div class="col-4">
                <div class="form-group">
                    <label for="Apellido">Apellido:</label>
                    <InputText class="form-control"  @bind-Value="usuario.Apellido" />
                    <ValidationMessage For="() => usuario.Apellido" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-4">
                <div class="form-group">
                    <label for="Email">Email:</label>
                    <InputText class="form-control" @bind-Value="usuario.Email" />
                    <ValidationMessage For="() => usuario.Email" />
                </div>
            </div>
            <div class="col-4">
                <div class="form-group">
                    <label for="Telefono">Telefono:</label>
                                        <InputText class="form-control" @bind-Value="usuario.Telefono" maxlength="8" pattern="\d*"
                                                   oninput="this.value = this.value.replace(/[^0-9]/g, '')" />
                    <ValidationMessage For="() => usuario.Telefono" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-4">
                <div class="form-group">
                    <label for="RolId">Rol:</label>
                    <select class="form-control" @bind="usuario.RolId" required>
                        <option value="">Seleccione un rol</option>
                        @foreach (var rol in roles)
                        {
                            <option value="@rol.Id">@rol.Nombre</option>
                        }
                    </select>
                    <ValidationMessage For="() => usuario.RolId" />
                </div>
            </div>
            <div class="col-4">
                <div class="form-group">
                    <label for="DUI">DUI:</label>
                                        <InputText class="form-control" @bind-Value="usuario.DUI" maxlength="9" pattern="\d*"
                                                   oninput="this.value = this.value.replace(/[^0-9]/g, '')" />
                    <ValidationMessage For="() => usuario.DUI" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-4">
                <div class="form-group">
                    <label for="Codigo">Codigo:</label>
                    <InputText class="form-control"  @bind-Value="usuario.Codigo" />
                    <ValidationMessage For="() => usuario.Codigo" />
                </div>
            </div>
            <div class="col-4">
                <div class="form-group">
                    <label for="Direccion">Direccion:</label>
                    <InputText class="form-control"  @bind-Value="usuario.Direccion" />
                    <ValidationMessage For="() => usuario.Direccion" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group">
                <label for="Password">Contraseña:</label>
                <InputText class="form-control"  @bind-Value="usuario.Password" />
                <ValidationMessage For="() => usuario.Password" />
            </div>
        </div>
        <br>
        <div class="row">
            <div class="col-12">
                <button type="submit" class="btn btn-primary">Modificar</button>
                <NavLink href="/lista-usuario" class="btn btn-secondary">Cancelar</NavLink>
            </div>
        </div>
    </EditForm>
}
else if (isSuccess)
{
    usuario = new EditUsuarioDTO();
    isError = false;
    <p class="alert alert-success">Usuario se modifico con éxito.</p>
    <NavLink href="/lista-usuario" class="btn btn-primary">Aceptar</NavLink>
}
else if (isError)
{
    <p class="alert alert-error">Sucedio un error al intentar modificar. o no ha realizado ninguna modificacion al registro actual</p>
    <NavLink href="/lista-usuario" class="btn btn-primary">Aceptar</NavLink>
}
</div>
        </div>
    </div>
</ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AutorizacionPorRol>
</ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AuthGuard>
@code {
    // Declaración de un parámetro llamado "Id" que puede ser pasado al componente
    [Parameter]
    public int Id { get; set; }

    // Inyección de dependencia de CustomerService para
    // acceder a los servicios relacionados con los clientes
    [Inject]
    UsuarioService usuarioService { get; set; }

    List<BuscarRolResultadosDto.RolDto> roles = new List<BuscarRolResultadosDto.RolDto>();
    // Declaración e inicialización de un objeto "customer"
    //  para almacenar los detalles del cliente
    EditUsuarioDTO usuario = new EditUsuarioDTO();

    // Declaración de variables booleanas para manejar el estado de éxito y error
    bool isSuccess = false;
    bool isError = false;

    // Método que se llama cuando se inicializa el componente
    protected override async Task OnInitializedAsync()
    {
        // Realiza una llamada asincrónica para obtener los
        // detalles del cliente por su Id
        var usuarioDetail = await usuarioService.ObtenerUsuario(Id);

        // Inicializa el objeto "customer" con los detalles del cliente obtenidos
        usuario = new EditUsuarioDTO(usuarioDetail);

        roles = await usuarioService.ObtenerRoles();
    }

    // Método para editar el cliente
    private async Task Edit()
    {
        // Realiza una llamada asincrónica para editar la información del cliente
        int result = await usuarioService.ActualizarUsuario(usuario);

        // Verifica si el resultado de la edición es diferente
        // de cero (éxito) o igual a cero (error)
        if (result != 0)
            isSuccess = true;
        else
            isError = true;
    }

}