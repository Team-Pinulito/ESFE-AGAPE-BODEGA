@page "/lista-tipoActivo"
@using ESFE_AGAPE_BODEGA.DTOs.TipoActivoDTOs;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using ESFE_AGAPE_BODEGA.BlazorWebAssembly.DataService;

<ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AuthGuard>
    <ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AutorizacionPorRol Rol="Admin">

        <div class="row m-4">
            <div class="card col-md-12">
                <div class="card-header row"><h1 class="col-md-12">Lista de Tipos de Activos</h1></div>
                <div class="card-body">
                    <EditForm Model="searchQuery" OnValidSubmit="SubmitSearch">
                        <div class="row">
                            <div class="col-md-6">
                                <label for="Name">Nombre:</label>
                                <InputText class="form-control" @bind-Value="searchQuery.Nombre_Like" />
                            </div>
                            <div class="col-md-6">
                                <label for="Take">CantReg X Pagina</label>
                                <select class="form-control" @bind="searchQuery.Take">
                                    @for (var i = 10; i < 1000; i += 10)
                                    {
                                        <option value="@i">@i</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col-md-6 row">
                                <div class="col-md-6 mt-1">
                                    <button type="submit" class="btn btn-secondary" style="width:100%;">Buscar</button>
                                </div>
                                <div class="col-md-6 mt-1">
                                    <NavLink href="/crear-tipo-activo" class="btn btn-success" style="width:100%;">Crear</NavLink>
                                </div>
                            </div>
                            <div class="row col-md-3" style="overflow:auto !important; max-width:600px; margin-top:5px;">
                                <nav aria-label="Page navigation example">
                                    <ul class="pagination">
                                        <li class="page-item">
                                            <NavLink class="page-link" @onclick="async () => await PaginationSearch(skipAnte)">Anterior</NavLink>
                                        </li>
                                        @foreach (var item in paginations)
                                        {
                                            if (item.Skip != searchQuery.Skip)
                                            {
                                                <li class="page-item">
                                                    <NavLink class="page-link" @onclick="async () => await PaginationSearch(item.Skip)">@item.NumPage</NavLink>
                                                    </li>
                                            }
                                            else
                                            {
                                                <li class="page-item active">
                                                    <NavLink class="page-link active" @onclick="async () => await PaginationSearch(item.Skip)">@item.NumPage</NavLink>
                                                    </li>
                                            }
                                        }
                                        <li class="page-item">
                                            <NavLink class="page-link" @onclick="async () => await PaginationSearch(skipSi)">Siguiente</NavLink>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                            <div class="col-md-3 m-3">
                                <span>Total de registros: @searchResult.CountRow</span>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
            <div class="card col-md-12">
                <div class="card-header row"><h1 class="col-md-12">Lista de Tipos de Activos</h1></div>
                <div class="card-body">
                    @if (searchResult != null && searchResult.Data != null && searchResult.Data.Count > 0)
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Nombre</th>
                                    <th>Descripción</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var tipoActivo in searchResult.Data)
                                {
                                    <tr>
                                        <td>@tipoActivo.Nombre</td>
                                        <td>
                                            <table>
                                                <tr>
                                                    <td>
                                                        <button class="btn btn-dark" @onclick="() => GoEdit(tipoActivo.Id)">Editar</button>
                                                    </td>
                                                    <td>
                                                        <button class="btn btn-info" @onclick="() => GoDetails(tipoActivo.Id)">Ver</button>
                                                    </td>
                                                    <td>
                                                        <button class="btn btn-danger" @onclick="() => GoDelete(tipoActivo.Id)">Eliminar</button>
                                                    </td>
                                                </tr>
                                            </table>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>No se encontraron resultados.</p>
                    }
                </div>
            </div>
        </div>

    </ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AutorizacionPorRol>
</ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AuthGuard>

@code {
    [Inject]
    TipoActivoService tipoActivoService { get; set; }
    [Inject]
    NavigationManager navigation { get; set; }

    SearchResultTipoActivoDTO searchResult = new SearchResultTipoActivoDTO();
    SearchQueryTipoActivoDTO searchQuery = new SearchQueryTipoActivoDTO { Take = 10 };
    List<Pagination> paginations = new List<Pagination>();
    int skipAnte = 0;
    int skipSi = 0;

    private async Task Search()
    {
        searchResult = await tipoActivoService.Buscar(searchQuery); // Asegúrate de que Buscar devuelva SearchResultTipoActivoDTO
    }

    protected override async Task OnInitializedAsync()
    {
        searchQuery.SendRowCount = 2;
        searchQuery.Skip = 0;
        await Search();
        UpdatePagination();
    }

    private async Task SubmitSearch()
    {
        searchQuery.SendRowCount = 2;
        searchQuery.Skip = 0;
        await Search();
        UpdatePagination();
    }

    private async Task PaginationSearch(int skip)
    {
        int countRowTemp = searchResult.CountRow;
        searchQuery.SendRowCount = 1;
        searchQuery.Skip = skip;
        await Search();
        searchResult.CountRow = countRowTemp;
        UpdatePagination();
    }

    private void GoEdit(int Id)
    {
        navigation.NavigateTo($"/editar-tipo-activo/{Id}");
    }

    private void GoDetails(int Id)
    {
        navigation.NavigateTo($"/tipo-activo-detalles/{Id}");
    }

    private void GoDelete(int Id)
    {
        navigation.NavigateTo($"/eliminar-tipo-activo/{Id}");
    }

    private void UpdatePagination()
    {
        paginations = new List<Pagination>();
        int totalPages = (int)Math.Ceiling((double)searchResult.CountRow / searchQuery.Take);
        skipAnte = searchQuery.Skip > 0 ? searchQuery.Skip - searchQuery.Take : 0;
        int skipMax = 0;

        for (var i = 0; i < totalPages; i++)
        {
            var pagination = new Pagination()
                {
                    Skip = i * searchQuery.Take,
                    NumPage = i + 1
                };

            paginations.Add(pagination);
            skipMax = pagination.Skip;
        }

        skipSi = searchQuery.Skip + searchQuery.Take;
        skipSi = skipSi > skipMax ? skipSi - searchQuery.Take : skipSi;
    }

    class Pagination
    {
        public int NumPage { get; set; }
        public int Skip { get; set; }
    }
}