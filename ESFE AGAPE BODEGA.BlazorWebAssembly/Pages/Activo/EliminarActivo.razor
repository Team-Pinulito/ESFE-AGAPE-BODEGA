@page "/eliminar-activo/{Id:int}"
@using ESFE_AGAPE_BODEGA.DTOs.EstanteDTOs;
@using ESFE_AGAPE_BODEGA.DTOs.TipoActivoDTOs;
@using ESFE_AGAPE_BODEGA.DTOs.ActivoDTOs;
@using Microsoft.AspNetCore.Components.Forms;
@using ESFE_AGAPE_BODEGA.BlazorWebAssembly.DataService;

<ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AuthGuard>
    <ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AutorizacionPorRol Roles='new List<string> { "Admin", "SusAdmin" }'>
        <div class="row m-4">
            <div class="card col-md-12">
                <div class="card-header row"><h1>Eliminar Activo</h1></div>
                <div class="card-body">
                    @if (isSuccess == false && isError == false)
                    {
                        <div class="row">
                            <div class="col-md-4">
                                <label for="Nombre" class="form-label">Nombre</label>
                                <input type="text" class="form-control" disabled @bind="activo.Nombre" />
                            </div>
                            <div class="col-md-4">
                                <label for="Descripcion" class="form-label">Descripcion</label>
                                <textarea type="text" disabled class="form-control" @bind="activo.Descripcion" />
                            </div>
                            <div class="col-md-4">
                                <label for="Nombre" class="form-label">Estante</label>
                                <select class="form-control" disabled @bind="activo.EstanteId" required>
                                    <option value="">Seleccione un estante</option>
                                    @foreach (var estante in estantes)
                                    {
                                        <option value="@estante.Id">@estante.Nombre</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="Nombre" class="form-label">Tipo de Activo</label>
                                <select class="form-control" disabled @bind="activo.TipoActivoId" required>
                                    <option value="">Seleccione un tipo de activo</option>
                                    @foreach (var tipoActivo in tipoActivos)
                                    {
                                        <option value="@tipoActivo.Id">@tipoActivo.Nombre</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="Codigo" class="form-label">Código</label>
                                <input type="text" class="form-control" disabled @bind="activo.Codigo" />
                            </div>
                            <div class="col-md-4">
                                <label for="CodigoBarra" class="form-label">Código de barra</label>
                                <input type="text" class="form-control" disabled @bind="activo.CodigoBarra" />
                            </div>
                            <div class="col-md-6 mt-3">
                                <button class="btn btn-danger w-100" @onclick="async () => await Delete()">Eliminar</button>
                            </div>
                            <div class="col-md-6 mt-3">
                                <NavLink href="/lista-activo" class="btn btn-secondary w-100">Cancelar</NavLink>
                            </div>
                        </div>
                        <LoadingSpinner IsLoading="@isLoading" />
                    }
                    else if (isSuccess)
                    {
                        <p class="alert alert-success">Activo se elimino con éxito.</p>
                        <NavLink href="/lista-activo" class="btn btn-success">Aceptar</NavLink>
                    }
                    else if (isError)
                    {
                        <p class="alert alert-error">Sucedio un error al intentar eliminar</p>
                        <NavLink href="/lista-activo" class="btn btn-danger">Aceptar</NavLink>
                    }
                </div>
            </div>
        </div>
    </ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AutorizacionPorRol>
</ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AuthGuard>
@code {
    // Declaración de un parámetro llamado "Id" que puede ser pasado al componente
    [Parameter]
    public int Id { get; set; }

    // Inyección de dependencia de CustomerService para acceder a los servicios relacionados con los clientes
    [Inject]
    ActivoService activoService { get; set; }
    List<SearchResultTipoActivoDTO.TipoActivoDTO> tipoActivos = new List<SearchResultTipoActivoDTO.TipoActivoDTO>();
    List<SearchResultEstanteDTO.EstanteDTO> estantes = new List<SearchResultEstanteDTO.EstanteDTO>();

    // Declaración e inicialización de un objeto "customer" para almacenar la información del cliente
    GetIdResultActivoDTO activo = new GetIdResultActivoDTO();

    // Declaración de variables booleanas para manejar el estado de éxito y error
    bool isSuccess = false;
    bool isError = false;

    bool isLoading = false; // Estado de carga
                            // Método que se llama cuando se inicializa el componente
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            // Realiza una llamada asincrónica para obtener la información del cliente por su Id
            activo = await activoService.ObtenerActivoId(Id);

            estantes = await activoService.ObtenerEstante();
            tipoActivos = await activoService.ObtenerTipoActivo();
        }
        finally
        {
            isLoading = false;
        }
    }

    // Método para eliminar el cliente
    private async Task Delete()
    {
        isLoading = true;
        try
        {
            // Realiza una llamada asincrónica para eliminar el cliente por su Id
            int result = await activoService.EliminarActivo(activo.Id);

            // Verifica si el resultado de la eliminación es diferente de cero (éxito) o igual a cero (error)
            if (result != 0)
                isSuccess = true;
            else
                isError = true;
        }
        finally
        {
            isLoading = false;
        }
    }

}