@page "/lista-ingresoActivo"
@using ESFE_AGAPE_BODEGA.DTOs.IngresoActivoDTOs;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using ESFE_AGAPE_BODEGA.BlazorWebAssembly.DataService;

<ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AuthGuard>
	<ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AutorizacionPorRol Rol="Admin">

		<div class="row m-4">
			<div class="card col-md-12">
				<div class="card-header row"><h1 class="col-md-12">Lista de Ingreso Activo</h1></div>
				<div class="card-body">
					<EditForm Model="searchQuery" OnValidSubmit="SubmitSearch">
						<div class="row">
							<div class="col-md-4">

								<label for="Correlativo">Correlativo:</label>
								<InputText class="form-control" @bind-Value="searchQuery.Correlativo_Like" />

							</div>
							<div class="col-md-4">

								<label for="Take">CantReg X Pagina</label>
								<select class="form-control" @bind="searchQuery.Take">
									@for (var i = 10; i < 1000; i += 10)
									{
										<option value="@i">@i</option>
									}
								</select>

							</div>
						</div>
						<br />
						<div class="row">
							<div class="col-md-6 row">
								<div class="col-md-6 mt-1">
									<button type="submit" class="btn btn-secondary" style="width:100%;">Buscar</button>
								</div>
								<div class="col-md-6 mt-1">
									<NavLink href="/crear-ingresoActivo" class="btn btn-success" style="width:100%;">Crear</NavLink>
								</div>
							</div>
							<div class="row col-md-3" style="overflow:auto !important;max-width:600px; margin-top:5px;">
								<nav aria-label="Page navigation example">
									<ul class="pagination">
										<li class="page-item">
											<NavLink class="page-link" @onclick="async () => await PaginationSearch(skipAnte)">Anterior</NavLink>
										</li>
										@foreach (var item in paginations)
										{
											if (item.Skip != searchQuery.Skip)
											{
												<li class="page-item">
													<NavLink class="page-link" @onclick="async () => await PaginationSearch(item.Skip)">@item.NumPage</NavLink>
													</li>
											}
											else
											{
												<li class="page-item active">
													<NavLink class="page-link active" @onclick="async () => await PaginationSearch(item.Skip)">@item.NumPage</NavLink>
													</li>
											}
										}
										<li class="page-item">
											<NavLink class="page-link" @onclick="async () => await PaginationSearch(skipSi)">Siguiente</NavLink>
										</li>
									</ul>

								</nav>
							</div>
							<div class="col-md-3 m-3">
								<span>Total de registros: @searchResult.CountRow</span>
							</div>
						</div>

					</EditForm>


				</div>
			</div>
			<div class="card col-md-12">
				<div class="card-header row"><h1 class="col-md-12">Lista de Ingreso Activo</h1></div>
				<div class="card-body">
					@if (searchResult != null && searchResult.Data != null && searchResult.Data.Count > 0)
					{
						<table class="table">
							<thead>
								<tr>
									<th>Correlativo</th>
									<th>Fecha Ingreso</th>
									<th>Acciones</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var ingresoActivo in searchResult.Data)
								{
									<tr>
										<td>@ingresoActivo.Correlativo</td>
										<td>@ingresoActivo.FechaIngreso.ToString("dd/MM/yyyy")</td> <!-- Corregido -->
										<td>
											<table>
												<tr>
													<td>
														<button class="btn btn-dark" @onclick="() => GoEdit(ingresoActivo.Id)">Editar</button>
													</td>
													<td>
														<button class="btn btn-info" @onclick="() => GoDetails(ingresoActivo.Id)">Ver</button>
													</td>
													<td>
														<button class="btn btn-danger" @onclick="() => GoDelete(ingresoActivo.Id)">Eliminar</button>
													</td>
												</tr>
											</table>
										</td>
									</tr>
								}
							</tbody>
						</table>
					}
				</div>
			</div>
		</div>

	</ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AutorizacionPorRol>
</ESFE_AGAPE_BODEGA.BlazorWebAssembly.Pages.Login.AuthGuard>

@code {
	// Inyección de dependencias de IngresoActivoService y NavigationManager
	[Inject]
	IngresoActivoService ingresoActivoService { get; set; }
	[Inject]
	NavigationManager navigation { get; set; }

	// Declaración e inicialización de objetos y variables necesarias para la búsqueda y paginación
	SearchResultIngresoActivoDTO searchResult = new SearchResultIngresoActivoDTO();
	SearchQueryIngresoActivoDTO searchQuery = new SearchQueryIngresoActivoDTO { Take = 10 }; // Cantidad de registros por página
	List<Pagination> paginations = new List<Pagination>();
	int skipAnte = 0;
	int skipSi = 0;

	// Método para realizar una búsqueda de IngresoActivo
	private async Task Search()
	{
		searchResult = await ingresoActivoService.Buscar(searchQuery);
	}

	// Inicialización del componente (al cargar la página)
	protected override async Task OnInitializedAsync()
	{
		// Configuración inicial de la búsqueda
		searchQuery.SendRowCount = 2;
		searchQuery.Skip = 0;

		// Realizar la búsqueda inicial
		await Search();

		// Actualizar la paginación
		UpdatePagination();
	}

	// Método para realizar la búsqueda cuando se envía el formulario de búsqueda
	private async Task SubmitSearch()
	{
		// Configuración de la búsqueda
		searchQuery.SendRowCount = 2;
		searchQuery.Skip = 0;

		// Realizar la búsqueda
		await Search();

		// Actualizar la paginación
		UpdatePagination();
	}

	// Método para realizar la búsqueda basada en la paginación
	private async Task PaginationSearch(int skip)
	{
		// Almacenar temporalmente la cantidad de filas de resultados
		int countRowTemp = searchResult.CountRow;

		// Configuración para la búsqueda paginada
		searchQuery.SendRowCount = 1;
		searchQuery.Skip = skip;

		// Realizar la búsqueda paginada
		await Search();

		// Restaurar la cantidad de filas original
		searchResult.CountRow = countRowTemp;

		// Actualizar la paginación
		UpdatePagination();
	}

	// Métodos para navegar a las páginas de edición, detalles y eliminación
	private void GoEdit(int Id)
	{
		navigation.NavigateTo($"/editar-ingresoActivo/{Id}");
	}

	private void GoDetails(int Id)
	{
		navigation.NavigateTo($"/ver-ingresoActivo/{Id}");
	}

	private void GoDelete(int Id)
	{
		navigation.NavigateTo($"/eliminar-ingresoActivo/{Id}");
	}

	// Método para actualizar la paginación
	private void UpdatePagination()
	{
		// Inicializar la lista de paginación
		paginations = new List<Pagination>();

		// Calcular el número total de páginas
		int totalPages = (int)Math.Ceiling((double)searchResult.CountRow / searchQuery.Take);

		// Calcular el valor de skipAnte y skipSi
		skipAnte = searchQuery.Skip > 0 ? searchQuery.Skip - searchQuery.Take : 0;
		int skipMax = 0;

		// Generar objetos de paginación y agregarlos a la lista
		for (var i = 0; i < totalPages; i++)
		{
			var pagination = new Pagination()
				{
					Skip = i * searchQuery.Take,
					NumPage = i + 1
				};

			paginations.Add(pagination);
			skipMax = pagination.Skip;
		}

		// Calcular el valor de skipSi
		skipSi = searchQuery.Skip + searchQuery.Take;
		skipSi = skipSi > skipMax ? skipSi - searchQuery.Take : skipSi;
	}

	// Clase para representar la información de paginación
	class Pagination
	{
		public int NumPage { get; set; }
		public int Skip { get; set; }
	}
}